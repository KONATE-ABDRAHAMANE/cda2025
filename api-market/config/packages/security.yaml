security:
  password_hashers:
    App\Entity\Client:
      algorithm: auto

  providers:
    app_user_provider:
      entity:
        class: App\Entity\Client
        property: email

  firewalls:
    dev:
      pattern: ^/(_(profiler|wdt)|css|images|js)/
      security: false

    login:
      pattern: ^/api/login
      stateless: true
      json_login:
        check_path: /api/login
        username_path: email
        password_path: password
        success_handler: lexik_jwt_authentication.handler.authentication_success
        failure_handler: lexik_jwt_authentication.handler.authentication_failure

    api:
      pattern: ^/api
      stateless: true
      provider: app_user_provider
      jwt: ~

    main:
      lazy: true
      provider: app_user_provider

  access_control:
    - { path: ^/api/login, roles: PUBLIC_ACCESS }
    - { path: ^/api/produits, roles: PUBLIC_ACCESS }
    - { path: ^/api/client$, roles: PUBLIC_ACCESS } # inscription client
    - { path: ^/api/utilisateur/demande-reinitialisation, roles: PUBLIC_ACCESS }
    - { path: ^/api/utilisateur/confirmer-reinitialisation, roles: PUBLIC_ACCESS }
    - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

  role_hierarchy:
    ROLE_ADMIN: [ROLE_CLIENT, ROLE_LIVREUR]
